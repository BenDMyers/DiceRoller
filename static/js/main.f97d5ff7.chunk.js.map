{"version":3,"sources":["actions/types.js","reducers/rolls.js","reducers/index.js","reducers/input.js","actions/index.js","threejs/GeneralLights.js","threejs/SceneManager.js","components/ThreeContainer.js","threejs/threeEntryPoint.js","diceLogic/parseRollNotation.js","components/DieButton.js","threejs/Cube.js","threejs/Dodecahedron.js","threejs/DoublePentagonalTrapezohedron.js","threejs/Icosahedron.js","threejs/Octahedron.js","threejs/PentagonalTrapezohedron.js","threejs/Tetrahedron.js","threejs/Colors.js","components/QuickRoll.js","components/RollInput.js","diceLogic/displayRollBreakdown.js","components/RollTable.js","components/App.js","index.js","diceLogic/interpretRoll.js"],"names":["ADD_ROLL","MODIFY_INPUT","reducers","Object","redux","rolls","state","arguments","length","undefined","action","type","payload","concat","_toConsumableArray","inputValue","document","querySelector","classList","remove","style","display","addRoll","rollData","modifyInput","newValue","GeneralLights","scene","ambientColor","strongLightColor","weakLightColor","ambient","three_module","strongLight","weakLight","position","set","add","update","time","SceneManager","canvas","shape","color","color2","clock","origin","screenDimensions","width","height","mousePosition","x","y","renderer","_ref","alpha","antialias","devicePixelRatio","window","setPixelRatio","setSize","gammaInput","gammaOutput","buildRender","camera","_ref2","aspectRatio","z","buildCamera","sceneSubjects","newShape","createSceneSubjects","elapsedTime","getElapsedTime","i","lookAt","render","onWindowResize","aspect","updateProjectionMatrix","onMouseMove","ThreeContainer_ThreeContainer","_this$props","this","props","_this$props$color","containerElement","createElement","appendChild","createCanvas","sceneManager","resizeCanvas","innerWidth","onresize","requestAnimationFrame","threeEntryPoint","threeRootElement","_this","react_default","a","ref","element","react","roller","parseRollNotation","notation","parse","e","DieButton_DieButton","DieButton","DieButton_classCallCheck","DieButton_possibleConstructorReturn","DieButton_getPrototypeOf","call","triggerRoll","safeSides","sides","parsed","rolled","interpretRoll","original","_this2","addEventListener","event","setState","target","className","onClick","components_DieButton","es","actions_namespaceObject","Cube","materialColor","opacity","group","geometry","material","side","transparent","mesh","wireframe","speed","angle","rotation","Dodecahedron","radius","THREE","CANNON","cannon_default","DoublePentagonalTrapezohedron","materialColor1","materialColor2","world","World","dice","setWorld","d10Model1","size","chamfer","geometry1","getGeometry","material1","mesh1","wireframe1","d10Model2","geometry2","material2","mesh2","wireframe2","Icosahedron","Octahedron","PentagonalTrapezohedron","d10Model","Tetrahedron","RED","components_QuickRoll","QuickRoll","QuickRoll_classCallCheck","QuickRoll_possibleConstructorReturn","QuickRoll_getPrototypeOf","forceResize","forceUpdate","RollInput_RollInput","parseRoll","split","join","Error","fullError","toString","cleanError","substr","lastIndexOf","innerHTML","onChangeInput","value","id","placeholder","onChange","htmlFor","components_RollInput","displayRollBreakdown","roll","map","term","index","constant","key","operator","console","log","synthesizedRolls","polyhedronSpan","determinePolyhedronClasses","diceTerm","die","breakdownDiceTerm","breakdownTerm","dieIndex","explosions","push","allRolls","rerolls","keep","dieClasses","elementArr","RollTable_RollTable","breakdown","band","rollRowClass","evaluated","borderCollapse","border","renderRolls","components_RollTable","components_App","react_dom_default","store","getElementById","terms","forEach","rollDice","toEvaluate","sum","eval","count","generateRoll","explode","reroll","rerollLowest","synthesizeRolls","determineKeep","sumOfRolls","Math","floor","random","compareByRoll","b","includes","explosionChain","currentRoll","keepFlags","rollsWithIndices","sort","reduce","prev","array","total","current","explosion"],"mappings":"6OAAaA,EAAW,WACXC,EAAe,oWCC5B,ICGAC,EAAeC,OAAAC,EAAA,EAAf,EAAgCC,MDHhC,WAA0C,IAAlBC,EAAkBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,MAARG,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACzC,OAAOC,EAAOC,MACb,KAAKX,EACJ,OAAQU,EAAOE,SAAfC,OAAAC,EAA2BR,IAC5B,QACC,OAAOA,ICF0CS,WCHpD,WAA0C,IAAlBT,EAAkBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAZ,GAAIG,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACzC,OAAOC,EAAOC,MACb,KAAKV,EAGJ,OAFAe,SAASC,cAAc,eAAeC,UAAUC,OAAO,+BACvDH,SAASC,cAAc,gCAAgCG,MAAMC,QAAU,OAChEX,EAAOE,QACf,QACC,OAAON,MCPH,SAASgB,EAAQC,GACvB,OACCZ,KAAMX,EACNY,QAASW,GAIJ,SAASC,EAAYC,GAC3B,OACCd,KAAMV,EACNW,QAASa,cCVXC,EAAA,SAAgBC,EAAOC,EAAcC,EAAkBC,GACnD,IAAMC,EAAW,IAAIC,EAAA,aAAmBJ,EAAc,GAChDK,EAAc,IAAID,EAAA,WAAiBH,EAAkB,GACrDK,EAAY,IAAIF,EAAA,WAAiBF,EAAgB,GASvD,OARAG,EAAYE,SAASC,KAAK,IAAI,GAAG,IACjCF,EAAUC,SAASC,IAAI,GAAI,GAAI,IAC/BT,EAAMU,IAAIN,GACVJ,EAAMU,IAAIJ,GACVN,EAAMU,IAAIH,IAIFI,OAFR,SAAgBC,OCTpBC,EAAA,SAAgBC,EAAQC,EAAOC,EAAOf,EAAcC,EAAkBC,GAAgC,IAAhBc,EAAgBrC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAT,KACnFsC,EAAQ,IAAIb,EAAA,MACZc,EAAS,IAAId,EAAA,QAAc,EAAE,EAAE,GAE/Be,GAAoBC,MAAOP,EAAOO,MAAOC,OAAQR,EAAOQ,QAExDC,GAAiBC,EAAG,EAAGC,EAAG,GAE1BzB,EAAQ,IAAIK,EAAA,MACZqB,EAIN,SAAAC,GAAsC,IAAhBN,EAAgBM,EAAhBN,MAAOC,EAASK,EAATL,OACnBI,EAAW,IAAIrB,EAAA,eAAqBS,SAAQc,OAAO,EAAMC,WAAW,IACpEC,EAAmBC,OAAOD,iBAAmBC,OAAOD,iBAAmB,EAK7E,OAJAJ,EAASM,cAAcF,GACvBJ,EAASO,QAAQZ,EAAOC,GACxBI,EAASQ,YAAa,EACtBR,EAASS,aAAc,EAChBT,EAXMU,CAAYhB,GACvBiB,EAaN,SAAAC,GAAwC,IAAjBjB,EAAiBiB,EAAjBjB,MAAOC,EAAUgB,EAAVhB,OACpBiB,EAAclB,EAAQC,EAItBe,EAAS,IAAIhC,EAAA,kBAHC,GAGoCkC,EAFtC,EACD,KAGjB,OADAF,EAAO7B,SAASgC,EAAI,GACbH,EApBII,CAAYrB,GACrBsB,EAsBN,SAA6B1C,GACzB,IAAI2C,EAEAA,EADD1B,EACYF,EAAMf,EAAO,GAAIgB,EAAOC,EAAQ,IAGhCF,EAAMf,EAAO,GAAIgB,EAAO,KAOvC,OAHIjB,EAAcC,EAAOC,EAAcC,EAAkBC,GACrDwC,GAjCcC,CAAoB5C,GAsE1C,OAAQW,OAhCR,WAEI,IADA,IAAMkC,EAAc3B,EAAM4B,iBAClBC,EAAI,EAAGA,EAAIL,EAAc7D,OAAQkE,IACrCL,EAAcK,GAAGpC,OAAOkC,GAO5BR,EAAO7B,SAASgB,GAAyD,KAA9B,IAAlBD,EAAcC,EAAYa,EAAO7B,SAASgB,GACnEa,EAAO7B,SAASiB,GAAyD,MAA9B,IAAlBF,EAAcE,EAAYY,EAAO7B,SAASiB,GACnEY,EAAOW,OAAO7B,GANdO,EAASuB,OAAOjD,EAAOqC,IA0BXa,eAjBhB,WAA0B,IACd7B,EAAkBP,EAAlBO,MAAOC,EAAWR,EAAXQ,OAEfF,EAAiBC,MAAQA,EACzBD,EAAiBE,OAASA,EAE1Be,EAAOc,OAAS9B,EAAQC,EACxBe,EAAOe,yBAEP1B,EAASO,QAAQZ,EAAOC,IAQI+B,YALhC,SAAqB7B,EAAGC,GACpBF,EAAcC,EAAIA,EAClBD,EAAcE,EAAIA,qwBC9EL6B,6OACG,IAAAC,EACoEC,KAAKC,MAAlF1C,EADSwC,EACTxC,MAAOC,EADEuC,EACFvC,MAAOf,EADLsD,EACKtD,aAAcC,EADnBqD,EACmBrD,iBAAkBC,EADrCoD,EACqCpD,eADrCuD,EAAAH,EACqDtC,cADrD,IAAAyC,EAC4D,KAD5DA,GCOxB,SAAgBC,EAAkB5C,EAAOC,EAAOf,EAAcC,EAAkBC,GAAgC,IAAhBc,EAAgBrC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAT,KAC7FkC,EAMN,SAAsBzB,EAAUsE,GAC5B,IAAM7C,EAASzB,EAASuE,cAAc,UAEtC,OADAD,EAAiBE,YAAY/C,GACtBA,EATIgD,CAAazE,SAAUsE,GAChCI,EAAelD,EAAaC,EAAQC,EAAOC,EAAOf,EAAcC,EAAkBC,EAAgBc,GAgBxG,SAAS+C,IAGLlD,EAAOO,MAAQU,OAAOkC,WAAW,EACjCnD,EAAOQ,OAASS,OAAOkC,WAAW,EAAI,GACtCF,EAAab,iBATbnB,OAAOmC,SAAWF,EAClBA,IAWJ,SAASf,EAAOrC,GACZuD,sBAAsBlB,GACtBc,EAAapD,SAvBjBsC,GDVImB,CAAgBZ,KAAKa,iBAAkBtD,EAAOC,EAAOf,EAAcC,EAAkBC,EAAgBc,oCAGhG,IAAAqD,EAAAd,KACL,OACIe,EAAAC,EAAAZ,cAAA,OAAKa,IAAK,SAACC,GACHJ,EAAKD,iBAAmBK,iNATAC,EAAA,mBEDtCC,EAAS,WAAIJ,GAEJ,SAASK,EAAkBC,GACzC,IAEC,OADeF,EAAOG,MAAMD,GAE3B,MAAME,GACP,OAAOA,8wBCFHC,cACF,SAAAC,EAAYzB,GAAO,IAAAa,EAAA,mGAAAa,CAAA3B,KAAA0B,IACfZ,EAAAc,EAAA5B,KAAA6B,EAAAH,GAAAI,KAAA9B,KAAMC,KAUb8B,YAAc,WACb,IAAMC,EAAiC,MAArBlB,EAAKb,MAAMgC,MAAgB,IAAMnB,EAAKb,MAAMgC,MAExDC,EAASb,EADTC,YAAgBU,IAEhBG,EAASnH,OAAAoH,EAAA,EAAApH,CAAckH,GAC7BpB,EAAKb,MAAM9D,SAASC,SAAU+F,EAAQE,qBAAevB,EAAKb,MAAMgC,UAd1DnB,EAAK3F,OAAS0C,MAAOU,OAAOkC,WAAW,EAAG3C,OAAQS,OAAOkC,WAAW,GAFrDK,qEAKC,IAAAwB,EAAAtC,KAChBzB,OAAOgE,iBAAiB,SAAU,SAACC,GAC/BF,EAAKG,UAAU5E,MAAO2E,EAAME,OAAOjC,WAAW,EAAG3C,OAAQ0E,EAAME,OAAOjC,WAAW,uCAarF,OACLM,EAAAC,EAAAZ,cAAA,KAAGnE,OAAQ4B,MAAOmC,KAAK7E,MAAM0C,MAAOC,OAAQkC,KAAK7E,MAAM2C,QACtD6E,UAAU,aACVC,QAAS5C,KAAK+B,aAEdhB,EAAAC,EAAAZ,cAAA,WACaW,EAAAC,EAAAZ,cAACN,EAAmBE,KAAKC,OACzBc,EAAAC,EAAAZ,cAAA,SAAOuC,UAAU,oBAAjB,IAAsC3C,KAAKC,MAAMgC,qNA5B1Cd,EAAA,WAmCxB0B,EAAe7H,OAAA8H,EAAA,EAAA9H,CAAQ,KAAM+H,EAA7B,CAAsCtB,GCxCtCuB,EAAA,SAAgBxG,EAAOnB,EAAQ4H,EAAeC,GAC1C,IAAMC,EAAQ,IAAItG,EAAA,MAEZuG,EAAW,IAAIvG,EAAA,YAAkBxB,EAAQA,EAAQA,GACjDgI,EAAW,IAAIxG,EAAA,qBACjBW,MAAOyF,EACPK,KAAMzG,EAAA,WACNqG,UACAK,aAAa,IAEXC,EAAO,IAAI3G,EAAA,KAAWuG,EAAUC,GAEhCI,EAAY,IAAI5G,EAAA,aAClB,IAAIA,EAAA,cAAoBuG,GACxB,IAAIvG,EAAA,mBAGRsG,EAAMjG,IAAIsG,GACVL,EAAMjG,IAAIuG,GAEVjH,EAAMU,IAAIiG,GAEV,IAAMO,EAAQ,EASd,OAAQvG,OAPR,SAAgBC,GACZ,IAAMuG,EAAQvG,EAAKsG,EACnBP,EAAMS,SAAS5E,GAAK2E,EACpBR,EAAMS,SAAS5F,EAAI2F,KC3B3BE,EAAA,SAAgBrH,EAAOsH,EAAQb,EAAeC,GAC1C,IAAMC,EAAQ,IAAItG,EAAA,MAEZuG,EAAW,IAAIvG,EAAA,qBAA2BiH,GAC1CT,EAAW,IAAIxG,EAAA,qBACjBW,MAAOyF,EACPK,KAAMzG,EAAA,WACNqG,UACAK,aAAa,IAEXC,EAAO,IAAI3G,EAAA,KAAWuG,EAAUC,GAEhCI,EAAY,IAAI5G,EAAA,aAClB,IAAIA,EAAA,cAAoBuG,GACxB,IAAIvG,EAAA,mBAGRsG,EAAMjG,IAAIsG,GACVL,EAAMjG,IAAIuG,GAEVjH,EAAMU,IAAIiG,GAEV,IAAMO,EAAQ,EASd,OAAQvG,OAPR,SAAgBC,GACZ,IAAMuG,EAAQvG,EAAKsG,EACnBP,EAAMS,SAAS5E,GAAK2E,EACpBR,EAAMS,SAAS5F,EAAI2F,4BCzB3BpF,OAAOwF,MAAQlH,EACf0B,OAAOyF,OAASC,EAAAjD,EAEhB,IAAAkD,EAAA,SAAgB1H,EAAOsH,EAAQK,EAAgBC,EAAgBlB,GAC3D,IAAMC,EAAQ,IAAItG,EAAA,MAGZwH,EAAQ,IAAIJ,EAAAjD,EAAOsD,MACzBC,EAAA,YAAYC,SAASH,GAErB,IAAMI,EAAY,IAAIF,EAAA,SAASG,KAAMZ,IACrCW,EAAUE,QAAU,EACpB,IAAMC,EAAYH,EAAUI,cACtBC,EAAY,IAAIjI,EAAA,qBAClBW,MAAO2G,EACPb,KAAMzG,EAAA,WACNqG,UACAK,aAAa,IAEXwB,EAAQ,IAAIlI,EAAA,KAAW+H,EAAWE,GAClCE,EAAa,IAAInI,EAAA,aACnB,IAAIA,EAAA,cAAoB+H,GACxB,IAAI/H,EAAA,mBAGFoI,EAAY,IAAIV,EAAA,SAASG,KAAMZ,EAAO,IAC5CmB,EAAUN,QAAU,EACpB,IAAMO,EAAYD,EAAUJ,cACtBM,EAAY,IAAItI,EAAA,qBAClBW,MAAO4G,EACPd,KAAMzG,EAAA,WACNqG,UACAK,aAAa,IAEX6B,EAAQ,IAAIvI,EAAA,KAAWqI,EAAWC,GAClCE,EAAa,IAAIxI,EAAA,aACnB,IAAIA,EAAA,cAAoBqI,GACxB,IAAIrI,EAAA,mBAGRsG,EAAMjG,IAAI6H,GACV5B,EAAMjG,IAAI8H,GAEVI,EAAMpI,SAASC,IAAY,IAAP6G,EAAkB,GAAPA,EAAmB,IAAPA,GAC3CuB,EAAWrI,SAASC,IAAY,IAAP6G,EAAkB,GAAPA,EAAmB,IAAPA,GAEhDX,EAAMjG,IAAIkI,GACVjC,EAAMjG,IAAImI,GAEV7I,EAAMU,IAAIiG,GAEV,IAAMO,EAAQ,EASd,OAAQvG,OAPR,SAAgBC,GACZ,IAAMuG,EAAQvG,EAAKsG,EACnBP,EAAMS,SAAS5E,GAAK2E,EACpBR,EAAMS,SAAS5F,EAAI2F,KC1D3B2B,EAAA,SAAgB9I,EAAOsH,EAAQb,EAAeC,GAC1C,IAAMC,EAAQ,IAAItG,EAAA,MAEZuG,EAAW,IAAIvG,EAAA,oBAA0BiH,GACzCT,EAAW,IAAIxG,EAAA,qBACjBW,MAAOyF,EACPK,KAAMzG,EAAA,WACNqG,UACAK,aAAa,IAEXC,EAAO,IAAI3G,EAAA,KAAWuG,EAAUC,GAEhCI,EAAY,IAAI5G,EAAA,aAClB,IAAIA,EAAA,cAAoBuG,GACxB,IAAIvG,EAAA,mBAGRsG,EAAMjG,IAAIsG,GACVL,EAAMjG,IAAIuG,GAEVjH,EAAMU,IAAIiG,GAEV,IAAMO,EAAQ,EASd,OAAQvG,OAPR,SAAgBC,GACZ,IAAMuG,EAAQvG,EAAKsG,EACnBP,EAAMS,SAAS5E,GAAK2E,EACpBR,EAAMS,SAAS5F,EAAI2F,KC3B3B4B,EAAA,SAAgB/I,EAAOsH,EAAQb,EAAeC,GAC1C,IAAMC,EAAQ,IAAItG,EAAA,MAEZuG,EAAW,IAAIvG,EAAA,mBAAyBiH,GACxCT,EAAW,IAAIxG,EAAA,qBACjBW,MAAOyF,EACPK,KAAMzG,EAAA,WACNqG,UACAK,aAAa,IAEXC,EAAO,IAAI3G,EAAA,KAAWuG,EAAUC,GAEhCI,EAAY,IAAI5G,EAAA,aAClB,IAAIA,EAAA,cAAoBuG,GACxB,IAAIvG,EAAA,mBAGRsG,EAAMjG,IAAIsG,GACVL,EAAMjG,IAAIuG,GAEVjH,EAAMU,IAAIiG,GAEV,IAAMO,EAAQ,EASd,OAAQP,QAAOhG,OAPf,SAAgBC,GACZ,IAAMuG,EAAQvG,EAAKsG,EACnBP,EAAMS,SAAS5E,GAAK2E,EACpBR,EAAMS,SAAS5F,EAAI2F,KCzB3BpF,OAAOwF,MAAQlH,EACf0B,OAAOyF,OAASC,EAAAjD,EAEhB,IAAAwE,EAAA,SAAgBhJ,EAAOsH,EAAQb,EAAeC,GAC1C,IAAMC,EAAQ,IAAItG,EAAA,MAGZwH,EAAQ,IAAIJ,EAAAjD,EAAOsD,MACzBC,EAAA,YAAYC,SAASH,GACrB,IAAMoB,EAAW,IAAIlB,EAAA,SAASG,KAAMZ,IACpC2B,EAASd,QAAU,EACnB,IAAMvB,EAAWqC,EAASZ,cACpBxB,EAAW,IAAIxG,EAAA,qBACjBW,MAAOyF,EACPK,KAAMzG,EAAA,WACNqG,UACAK,aAAa,IAEXC,EAAO,IAAI3G,EAAA,KAAWuG,EAAUC,GAEhCI,EAAY,IAAI5G,EAAA,aAClB,IAAIA,EAAA,cAAoBuG,GACxB,IAAIvG,EAAA,mBAGRsG,EAAMjG,IAAIsG,GACVL,EAAMjG,IAAIuG,GAEVjH,EAAMU,IAAIiG,GAEV,IAAMO,EAAQ,EASd,OAAQvG,OAPR,SAAgBC,GACZ,IAAMuG,EAAQvG,EAAKsG,EACnBP,EAAMS,SAAS5E,GAAK2E,EACpBR,EAAMS,SAAS5F,EAAI2F,KCrC3B+B,EAAA,SAAgBlJ,EAAOsH,EAAQb,EAAeC,GAC1C,IAAMC,EAAQ,IAAItG,EAAA,MAEZuG,EAAW,IAAIvG,EAAA,oBAA0BiH,GACzCT,EAAW,IAAIxG,EAAA,qBACjBW,MAAOyF,EACPK,KAAMzG,EAAA,WACNqG,UACAK,aAAa,IAEXC,EAAO,IAAI3G,EAAA,KAAWuG,EAAUC,GAEhCI,EAAY,IAAI5G,EAAA,aAClB,IAAIA,EAAA,cAAoBuG,GACxB,IAAIvG,EAAA,mBAGRsG,EAAMjG,IAAIsG,GACVL,EAAMjG,IAAIuG,GAEVjH,EAAMU,IAAIiG,GAEV,IAAMO,EAAQ,EASd,OAAQvG,OAPR,SAAgBC,GACZ,IAAMuG,EAAQvG,EAAKsG,EACnBP,EAAMS,SAAS5E,GAAK2E,EACpBR,EAAMS,SAAS5F,EAAI2F,KC5BdgC,EAAM,0wBCqCnBC,cA1BI,SAAAC,EAAY5F,GAAO,IAAAa,EAAA,mGAAAgF,CAAA9F,KAAA6F,IACf/E,EAAAiF,EAAA/F,KAAAgG,EAAAH,GAAA/D,KAAA9B,KAAMC,KACD9E,OAAS8K,YAAa,GAFZnF,qEAKC,IAAAwB,EAAAtC,KAChBzB,OAAOgE,iBAAiB,SAAU,kBAAMD,EAAK4D,iDAI7C,OAEInF,EAAAC,EAAAZ,cAAA,OAAKuC,UAAU,KAAK1G,OAAQC,QAAS,SACjC6E,EAAAC,EAAAZ,cAACyC,GAAUZ,MAAO,EAAG1E,MAAOmI,EAAalI,MDzBrC,UCyByDf,aAAc,QAASC,iBDvBxE,UCuB+GC,eDrBrH,YCsBNoE,EAAAC,EAAAZ,cAACyC,GAAUZ,MAAO,EAAG1E,MAAOyF,EAAMxF,MDvB5B,UCuBkDf,aAAc,QAASC,iBDtBzE,UCsB0GC,eDrB3G,YCsBLoE,EAAAC,EAAAZ,cAACyC,GAAUZ,MAAO,EAAG1E,MAAOgI,EAAY/H,MDvBlC,UCuBwDf,aAAc,QAASC,iBDtBhF,UCsBgHC,eDrBjH,YCsBJoE,EAAAC,EAAAZ,cAACyC,GAAUZ,MAAO,GAAI1E,MAAOiI,EAAyBhI,MDvBjD,UCuBsEf,aAAc,QAASC,iBDxB5F,UCwB6HC,eDxB7H,YCyBNoE,EAAAC,EAAAZ,cAACyC,GAAUZ,MAAO,GAAI1E,MAAOsG,EAAcrG,MDrBlC,UCqB2Df,aAAc,QAASC,iBDpBvF,UCoBsHC,eDnBpH,YCoBNoE,EAAAC,EAAAZ,cAACyC,GAAUZ,MAAO,GAAI1E,MAAO+H,EAAa9H,MDrBtC,UCqB0Df,aDpBxD,UCoBqFC,iBDpBrF,UCoBsHC,eAAgBgJ,IAC5I5E,EAAAC,EAAAZ,cAACyC,GAAUZ,MAAO,IAAK1E,MAAO2G,EAA+B1G,MDrBvD,UCqB6EC,OAAQkI,EAAYlJ,aAAckJ,EAAYjJ,iBAAkBiJ,EAAYhJ,eD7BnJ,yNCSJwE,EAAA,ixBCLlBgF,yRAQLC,UAAY,WACX,IAAM9E,EAAWR,EAAKb,MAAMrE,WAEtBsG,EAASb,EADUC,EAAS+E,MAAM,MAAMC,KAAK,SAGnD,GAAGpE,aAAkBqE,MAAO,CAC3B,IAAMC,EAAYtE,EAAOuE,WACrBC,EAAaF,EAAUG,OAAOH,EAAUI,YAAY,WAAa,UAAUvL,QAC/E,GAAkB,qBAAfqL,EACF,OAED7K,SAASC,cAAc,gCAAgC+K,UAAY,KAAOH,EAC1E7K,SAASC,cAAc,gCAAgCG,MAAMC,QAAU,QACvEL,SAASC,cAAc,eAAeC,UAAUmB,IAAI,mCAEhD,KAAIgF,EACR,OAIA,IAAMC,EAASnH,OAAAoH,EAAA,EAAApH,CAAckH,GAC7BpB,EAAKb,MAAM9D,SAASkG,SAAUf,EAAUlF,SAAU+F,IAClDrB,EAAKb,MAAM5D,YAAY,QA8BzByK,cAAgB,SAACtE,GAChB1B,EAAKb,MAAM5D,YAAYmG,EAAME,OAAOqE,OACpClL,SAASC,cAAc,gCAAgCG,MAAMC,QAAU,OACvEL,SAASC,cAAc,eAAeC,UAAUC,OAAO,uGA5DvDH,SAASC,cAAc,eAAeyG,iBAAiB,SAAU,WAChE1G,SAASC,cAAc,eAAeC,UAAUC,OAAO,kEA+BlD,OACL+E,EAAAC,EAAAZ,cAAA,WACCW,EAAAC,EAAAZ,cAAA,OAAKuC,UAAU,kBACd5B,EAAAC,EAAAZ,cAAA,QAAMnE,OAAQ4B,MAAO,MAAO3B,QAAS,iBACpC6E,EAAAC,EAAAZ,cAAA,SACC4G,GAAG,aACHrE,UAAU,aACVsE,YAAY,kBACZF,MAAO/G,KAAKC,MAAMrE,WAClBsL,SAAUlH,KAAK8G,iBAGjB/F,EAAAC,EAAAZ,cAAA,QAAMnE,OAAQ4B,MAAO,MAAO3B,QAAS,iBACpC6E,EAAAC,EAAAZ,cAAA,UAAQuC,UAAU,oBAAoBC,QAAS5C,KAAKoG,WAApD,UAKFrF,EAAAC,EAAAZ,cAAA,OAAKuC,UAAU,+BACd5B,EAAAC,EAAAZ,cAAA,SAAO+G,QAAQ,aAAaH,GAAG,kPAtDZ7F,EAAA,WAyExB,IAAAiG,GAAepM,OAAA8H,EAAA,EAAA9H,CANf,SAAyBG,GACxB,OACCS,WAAYT,EAAMS,aAIoBmH,EAAxC,CAAiDoD,IC7E1C,SAASkB,GAATlJ,GAA0C,IAAX/B,EAAW+B,EAAX/B,SACrC,GAAIA,EAAJ,CADgD,IAEzCkL,EAAQlL,EAARkL,KACP,OACCvG,EAAAC,EAAAZ,cAAA,QAAMuC,UAAU,aACd2E,EAAKC,IAAI,SAACC,EAAMC,GAAP,OAKb,SAAuBD,EAAMC,GAC5B,GAAGD,EAAKE,SACP,OAAO3G,EAAAC,EAAAZ,cAAA,QAAMuH,IAAKF,EAAO9E,UAAU,sBAA5B,IAAmD6E,EAAKE,SAAxD,KAEH,GAAGF,EAAKI,SACZ,OAAO7G,EAAAC,EAAAZ,cAAA,QAAMuH,IAAKF,EAAO9E,UAAU,sBAA5B,IAAmD6E,EAAKI,SAAxD,KAGPC,QAAQC,IAAIN,EAAKO,kBACjB,IAAMC,EAAiBjH,EAAAC,EAAAZ,cAAA,KAAGuH,IAAK,OAASF,EAAO9E,UAkDjD,SAAoCV,GACnC,OAAOA,GACN,KAAK,EACJ,MAAO,0CACR,KAAK,EACJ,MAAO,mCACR,KAAK,EACJ,MAAO,yCACR,KAAK,GACJ,MAAO,8CACR,KAAK,GACJ,MAAO,4CACR,KAAK,GACJ,MAAO,2CACR,KAAK,IACJ,MAAO,+CACR,QACC,MAAO,8CAnEkDgG,CAA2BT,EAAKU,SAASC,IAAIlG,SACvG,OAAGuF,EAAKO,iBAAiB1M,QAAU,EAEjC0F,EAAAC,EAAAZ,cAAA,QAAMuH,IAAK,OAASF,GAClBO,EAAgBI,GAAkBZ,IAMpCzG,EAAAC,EAAAZ,cAAA,QAAMuH,IAAK,OAASF,GAClBO,EADF,IACmBI,GAAkBZ,GADrC,KAxB0Ba,CAAcb,EAAMC,OAoDlD,SAASW,GAAkBZ,GAC1B,OAAOA,EAAKO,iBAAiBR,IAAI,SAACY,EAAKV,GACtC,IAAM1L,EAtBR,SAAoByL,EAAMc,GACzB,IAAIvM,GAAa,iBAgBjB,OAfGyL,EAAKe,YAAcf,EAAKe,WAAWD,GACrCvM,EAAUyM,KAAK,sBAEiDhB,EAAKiB,SAASH,KAAcd,EAAKU,SAASC,IAAIlG,OAC9GlG,EAAUyM,KAAK,0BAEbhB,EAAKkB,SAAWlB,EAAKkB,QAAQJ,IAC/BvM,EAAUyM,KAAK,sBAEsB,GAAnChB,EAAKO,iBAAiBO,IACxBvM,EAAUyM,KAAK,2BAEZhB,EAAKmB,KAAKL,IACbvM,EAAUyM,KAAK,qBAETzM,EAAUuK,KAAK,KAKHsC,CAAWpB,EAAMC,GAE7BoB,GADU9H,EAAAC,EAAAZ,cAAA,QAAMuH,IAAKF,EAAO9E,UAAW5G,GAA7B,IAA0CoM,IAK1D,OAHGV,EAAQD,EAAKO,iBAAiB1M,OAAS,GACzCwN,EAAWL,KAAKzH,EAAAC,EAAAZ,cAAA,QAAMuH,IAAK,OAASF,EAAO9E,UAAU,sBAArC,cAEVkG,6wBC9DHC,0OACS,IAAAhI,EAAAd,KACb,OAAIA,KAAKC,MAAM/E,MAIR8E,KAAKC,MAAM/E,MAAMqM,IAAI,SAACD,EAAMG,GAClC,IAAMsB,EAAY1B,GAAqBC,GACjC0B,EAAQvB,EAAQ,IAAM3G,EAAKb,MAAM/E,MAAMG,OAAS,EAAK,uBAAyB,wBAC9E4N,qBAA2BD,GACjC,OACCjI,EAAAC,EAAAZ,cAAA,MAAIuH,IAAKF,EAAO9E,UAAWsG,EAAcrG,QAAS,kBAAM9B,EAAKb,MAAM5D,YAAYiL,EAAKjF,YACnFtB,EAAAC,EAAAZ,cAAA,MAAIuC,UAAU,wBAAwBoG,GACtChI,EAAAC,EAAAZ,cAAA,MAAIuC,UAAU,6BAA6B2E,EAAKlL,SAAS8M,kDAO5D,OACCnI,EAAAC,EAAAZ,cAAA,SAAOnE,OAAQ4B,MAAO,OAAQsL,eAAgB,WAAYC,OAAQ,mBACjErI,EAAAC,EAAAZ,cAAA,SAAOnE,OAAQ4B,MAAO,QAAS8E,UAAU,cACvC3C,KAAKqJ,gOAvBalI,EAAA,WAkCxB,IAAAmI,GAAetO,OAAA8H,EAAA,EAAA9H,CAJf,SAAyBG,GACxB,OAAQD,MAAOC,EAAMD,QAGkB6H,EAAxC,CAAiD+F,6wBCtBjDS,qOAVQ,OACIxI,EAAAC,EAAAZ,cAAA,OAAKuC,UAAU,OACX5B,EAAAC,EAAAZ,cAACwF,EAAD,MACA7E,EAAAC,EAAAZ,cAACgH,GAAD,MACZrG,EAAAC,EAAAZ,cAACkJ,GAAD,uNANcnI,EAAA,WCGlBqI,EAAAxI,EAASvB,OACRsB,EAAAC,EAAAZ,cAAC0C,EAAA,GAAS2G,MAAOzO,OAAAC,EAAA,EAAAD,CAAYD,IAC5BgG,EAAAC,EAAAZ,cAACmJ,GAAD,OAED1N,SAAS6N,eAAe,6kBCZlB,SAAStH,cAAckF,MAC7B,IAAMqC,SACNrC,KAAKsC,QAAQ,SAACpC,GACVA,EAAA,IACFmC,MAAMnB,KAAKqB,SAASrC,IAEfmC,MAAMnB,KAAKhB,KAGlBK,QAAQC,IAAI6B,OAEZ,IAAMG,WAAaH,MAAMpC,IAAI,SAACC,GAC7B,OAAGA,EAAKiB,SACAjB,EAAKuC,IAELvC,EAAKI,SACLJ,EAAKI,SAELJ,EAAKE,SACLF,EAAKE,cADR,IAGHpB,KAAK,IAER,OAAQgB,KAAMqC,MAAOT,UAAWc,KAAKF,aAGtC,SAASD,SAAS3B,GAEjB,IADA,IAAMO,KACElJ,EAAI,EAAGA,EAAI2I,EAAS+B,MAAO1K,IAClCkJ,EAASD,KAAK0B,aAAahC,EAASC,IAAIlG,QAEzC,IAAMsG,EAAaL,EAASC,IAAIgC,QAAUA,QAAQjC,EAAUO,GAAY,KAClEC,EAAUR,EAASC,IAAIiC,OAASC,aAAanC,EAAUO,GAAY,KAEnEV,EAAmBuC,gBAAgB7B,EAAUF,EAAYG,GAEzDC,EAAO4B,cAAcrC,EAAUH,GAGrC,OAAQU,WAAUF,aAAYG,UAASC,OAAMoB,IAFjCS,WAAWzC,EAAkBY,GAESZ,mBAAkBG,YAGrE,SAASgC,aAAajI,GACrB,OAAOwI,KAAKC,MAAMD,KAAKE,SAAW1I,GAAS,EAG5C,SAAS2I,cAAc5J,EAAG6J,GACzB,OAAI7J,EAAEsG,KAAOuD,EAAEvD,MAAe,EAC1BtG,EAAEsG,KAAOuD,EAAEvD,KAAc,EACtB,EAGR,SAAS6C,QAAQjC,EAAUO,GAC1B,OAAOA,EAASlB,IAAI,SAAAD,GACnB,GAAGY,EAASC,IAAIgC,QAAQW,SAASxD,GAAO,CAGvC,IAFA,IAAMyD,KACFC,EAAc1D,EACZ0D,IAAgB9C,EAASC,IAAIlG,OAClC8I,EAAevC,KAAKwC,GACpBA,EAAcd,aAAahC,EAASC,IAAIlG,OAGzC,OADA8I,EAAevC,KAAKwC,GACbD,EAGP,OAAO,OAKV,SAASV,aAAanC,EAAUhN,GAC/B,OAAOA,EAAMqM,IAAI,SAACD,GACjB,OAAGY,EAASC,IAAIiC,OAAOU,SAASxD,IACvBA,EAAM4C,aAAahC,EAASC,IAAIlG,QAGjC,OAKV,SAASsI,cAAcrC,EAAUO,GAChC,IAAMwC,KACAC,EAAmBzC,EAASlB,IAAI,SAACD,EAAMG,GAE5C,OADAwD,EAAUzC,MAAK,IACPlB,OAAMG,WAEf,GAAqB,IAAlBS,EAASS,KAAa,OAAOsC,EAChCC,EAAiBC,KAAKP,eACtB,IAAI,IAAIrL,EAAI,EAAGA,EAAK2I,EAAS+B,MAAQ/B,EAASS,KAAOpJ,IACpD0L,EAAUC,EAAiB3L,GAAGkI,QAAS,EAGxC,OAAOwD,EAGR,SAAST,WAAWtP,EAAOyN,GAC1B,OAAOzN,EAAMkQ,OAAO,SAACC,EAAM/D,EAAMG,GAChC,OAAGkB,EAAKlB,GAAiB4D,EAAO/D,EAClB+D,GACZ,GAGJ,SAAStB,IAAIuB,GAAS,OAAOA,EAAMF,OAAO,SAACG,EAAOC,GAAR,OAAoBD,EAAQC,IAEtE,SAASlB,gBAAgB7B,EAAUF,EAAYG,GAC9C,IAAMxN,qBAAYuN,GAkBlB,OAhBGF,GACFA,EAAWhB,IAAI,SAACkE,EAAWhE,GACvBgE,IACFvQ,EAAMuM,GAASsC,IAAI0B,MAKnB/C,GACFA,EAAQnB,IAAI,SAAC6C,EAAQ3C,GACjB2C,IACFlP,EAAMuM,GAAS2C,EAAOA,EAAO/O,OAAS,MAKlCH","file":"static/js/main.f97d5ff7.chunk.js","sourcesContent":["export const ADD_ROLL = 'add roll';\r\nexport const MODIFY_INPUT = 'modify input';","import {ADD_ROLL} from '../actions/types';\r\n\r\nexport default function(state=[], action) {\r\n\tswitch(action.type) {\r\n\t\tcase ADD_ROLL:\r\n\t\t\treturn [action.payload, ...state];\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import {combineReducers} from 'redux';\r\n\r\nimport rollReducer from './rolls';\r\nimport inputReducer from './input';\r\n\r\nexport default combineReducers({rolls: rollReducer, inputValue: inputReducer});","import {MODIFY_INPUT} from '../actions/types';\r\n\r\nexport default function(state='', action) {\r\n\tswitch(action.type) {\r\n\t\tcase MODIFY_INPUT:\r\n\t\t\tdocument.querySelector('.roll-input').classList.remove('roll-input-validation-error');\r\n\t\t\tdocument.querySelector('.roll-input-validation-label').style.display = 'none';\r\n\t\t\treturn action.payload;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import {ADD_ROLL, MODIFY_INPUT} from './types';\r\n\r\nexport function addRoll(rollData) {\r\n\treturn {\r\n\t\ttype: ADD_ROLL,\r\n\t\tpayload: rollData\r\n\t};\r\n}\r\n\r\nexport function modifyInput(newValue) {\r\n\treturn {\r\n\t\ttype: MODIFY_INPUT,\r\n\t\tpayload: newValue\r\n\t};\r\n}","import * as THREE from 'three'\r\n\r\nexport default (scene, ambientColor, strongLightColor, weakLightColor) => {\r\n    const ambient =  new THREE.AmbientLight(ambientColor, 1)\r\n    const strongLight = new THREE.PointLight(strongLightColor, 1);\r\n    const weakLight = new THREE.PointLight(weakLightColor, 1);\r\n    strongLight.position.set(-20,-30,40);\r\n    weakLight.position.set(20, 30, 40);\r\n    scene.add(ambient);\r\n    scene.add(strongLight);\r\n    scene.add(weakLight);\r\n\r\n    function update(time) {}\r\n\r\n    return {update};\r\n}","import * as THREE from 'three';\r\nimport GeneralLights from './GeneralLights';\r\n\r\nexport default (canvas, shape, color, ambientColor, strongLightColor, weakLightColor, color2=null) => {\r\n    const clock = new THREE.Clock();\r\n    const origin = new THREE.Vector3(0,0,0);\r\n\r\n    const screenDimensions = {width: canvas.width, height: canvas.height};\r\n\r\n    const mousePosition = {x: 0, y: 0};\r\n\r\n    const scene = new THREE.Scene();\r\n    const renderer = buildRender(screenDimensions);\r\n    const camera = buildCamera(screenDimensions);\r\n    const sceneSubjects = createSceneSubjects(scene);\r\n\r\n    function buildRender({width, height}) {\r\n        const renderer = new THREE.WebGLRenderer({canvas, alpha: true, antialias: true});\r\n        const devicePixelRatio = window.devicePixelRatio ? window.devicePixelRatio : 1;\r\n        renderer.setPixelRatio(devicePixelRatio);\r\n        renderer.setSize(width, height);\r\n        renderer.gammaInput = true;\r\n        renderer.gammaOutput = true;\r\n        return renderer;\r\n    }\r\n\r\n    function buildCamera({ width, height }) {\r\n        const aspectRatio = width / height;\r\n        const fieldOfView = 60;\r\n        const nearPlane = 4;\r\n        const farPlane = 100;\r\n        const camera = new THREE.PerspectiveCamera(fieldOfView, aspectRatio, nearPlane, farPlane);\r\n        camera.position.z = 40;\r\n        return camera;\r\n    }\r\n\r\n    function createSceneSubjects(scene) {\r\n        let newShape;\r\n        if(color2) {\r\n            newShape = shape(scene, 15, color, color2, 0.9);\r\n        }\r\n        else {\r\n            newShape = shape(scene, 15, color, 0.93)\r\n        }\r\n\r\n        const sceneSubjects = [\r\n            GeneralLights(scene, ambientColor, strongLightColor, weakLightColor),\r\n            newShape\r\n        ];\r\n        return sceneSubjects;\r\n    }\r\n\r\n    function update() {\r\n        const elapsedTime = clock.getElapsedTime();\r\n        for(let i = 0; i < sceneSubjects.length; i++) {\r\n            sceneSubjects[i].update(elapsedTime);\r\n        }\r\n        updateCameraPositionRelativeToMouse();\r\n        renderer.render(scene, camera);\r\n    }\r\n\r\n    function updateCameraPositionRelativeToMouse() {\r\n        camera.position.x += (  (mousePosition.x * 0.01) - camera.position.x ) * 0.01;\r\n        camera.position.y += ( -(mousePosition.y * 0.01) - camera.position.y ) * 0.01;\r\n        camera.lookAt(origin);\r\n    }\r\n\r\n    function onWindowResize() {\r\n        const { width, height } = canvas;\r\n\r\n        screenDimensions.width = width;\r\n        screenDimensions.height = height;\r\n\r\n        camera.aspect = width / height;\r\n        camera.updateProjectionMatrix();\r\n\r\n        renderer.setSize(width, height);\r\n    }\r\n\r\n    function onMouseMove(x, y) {\r\n        mousePosition.x = x;\r\n        mousePosition.y = y;\r\n    }\r\n\r\n    return {update, onWindowResize, onMouseMove};\r\n}","import React, {Component} from 'react';\r\nimport threeEntryPoint from '../threejs/threeEntryPoint';\r\n\r\nexport default class ThreeContainer extends Component {\r\n    componentDidMount() {\r\n        const {shape, color, ambientColor, strongLightColor, weakLightColor, color2=null} = this.props;\r\n        threeEntryPoint(this.threeRootElement, shape, color, ambientColor, strongLightColor, weakLightColor, color2);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={(element) => {\r\n                    this.threeRootElement = element;\r\n                    // console.log(element.childNodes[0]);\r\n                }\r\n            }></div>\r\n        );\r\n    }\r\n}","// `threeEntryPoint` is a function that takes an element as parameter,\r\n// this element will be the container of the canvas.\r\n// This function is responsible for:\r\n//\r\n// 1. Creating the canvas\r\n// 2. Binding events\r\n// 3. Creating Three.js objects\r\n// 4. Starting the render loop\r\n\r\nimport SceneManager from './SceneManager';\r\n\r\nexport default (containerElement, shape, color, ambientColor, strongLightColor, weakLightColor, color2=null) => {\r\n    const canvas = createCanvas(document, containerElement);\r\n    const sceneManager = SceneManager(canvas, shape, color, ambientColor, strongLightColor, weakLightColor, color2);\r\n\r\n    bindEventListeners();\r\n    render();\r\n\r\n    function createCanvas(document, containerElement) {\r\n        const canvas = document.createElement('canvas');\r\n        containerElement.appendChild(canvas);\r\n        return canvas;\r\n    }\r\n\r\n    function bindEventListeners() {\r\n        window.onresize = resizeCanvas;\r\n        resizeCanvas();\r\n    }\r\n\r\n    function resizeCanvas() {\r\n        // canvas.style.width = window.innerWidth/7 + 'px';\r\n        // canvas.style.height = window.innerHeight/7 + 'px';\r\n        canvas.width = window.innerWidth/7;\r\n        canvas.height = window.innerWidth/7 * .8;\r\n        sceneManager.onWindowResize();\r\n    }\r\n\r\n    function render(time) {\r\n        requestAnimationFrame(render);\r\n        sceneManager.update();\r\n    }\r\n}","import Owlbear from 'owlbear';\r\n\r\nconst roller = new Owlbear();\r\n\r\nexport default function parseRollNotation(notation) {\r\n\ttry {\r\n\t\tconst parsed = roller.parse(notation);\r\n\t\treturn parsed;\r\n\t} catch(e) {\r\n\t\treturn e;\r\n\t}\r\n};","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../actions';\r\nimport ThreeContainer from './ThreeContainer';\r\nimport parseRollNotation from '../diceLogic/parseRollNotation';\r\nimport {interpretRoll} from '../diceLogic/interpretRoll';\r\n\r\nclass DieButton extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {width: window.innerWidth/7, height: window.innerWidth/7};\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('resize', (event) => {\r\n            this.setState({width: event.target.innerWidth/7, height: event.target.innerWidth/7});\r\n        });\r\n\t}\r\n\t\r\n\ttriggerRoll = () => {\r\n\t\tconst safeSides = this.props.sides === '%' ? 100 : this.props.sides;\r\n\t\tconst notation = `1d${safeSides}`\r\n\t\tconst parsed = parseRollNotation(notation);\r\n\t\tconst rolled = interpretRoll(parsed);\r\n\t\tthis.props.addRoll({rollData: rolled, original: `1d${this.props.sides}`})\r\n\t}\r\n\r\n    render() {\r\n        return (\r\n\t\t\t<a style={{width: this.state.width, height: this.state.height}} \r\n\t\t\t\tclassName=\"die-button\"\r\n\t\t\t\tonClick={this.triggerRoll}\r\n\t\t\t>\r\n\t\t\t\t<div>\r\n                \t<ThreeContainer {...this.props} />\r\n                \t<label className=\"die-button-label\">d{this.props.sides}</label>\r\n            \t</div>\r\n\t\t\t</a>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, actions)(DieButton);","import * as THREE from 'three';\r\n\r\nexport default (scene, length, materialColor, opacity) => {\r\n    const group = new THREE.Group();\r\n\r\n    const geometry = new THREE.BoxGeometry(length, length, length);\r\n    const material = new THREE.MeshLambertMaterial({\r\n        color: materialColor,\r\n        side: THREE.DoubleSide,\r\n        opacity,\r\n        transparent: true\r\n    });\r\n    const mesh = new THREE.Mesh(geometry, material);\r\n\r\n    const wireframe = new THREE.LineSegments(\r\n        new THREE.EdgesGeometry(geometry),\r\n        new THREE.LineBasicMaterial()\r\n    );\r\n\r\n    group.add(mesh);\r\n    group.add(wireframe);\r\n\r\n    scene.add(group);\r\n\r\n    const speed = 1;\r\n\r\n    function update(time) {\r\n        const angle = time*speed;\r\n        group.rotation.z = -angle;\r\n        group.rotation.x = angle;\r\n        // group.rotation.z = -45;\r\n    }\r\n\r\n    return {update};\r\n}","import * as THREE from 'three';\r\n\r\nexport default (scene, radius, materialColor, opacity) => {\r\n    const group = new THREE.Group();\r\n\r\n    const geometry = new THREE.DodecahedronGeometry(radius);\r\n    const material = new THREE.MeshLambertMaterial({\r\n        color: materialColor,\r\n        side: THREE.DoubleSide,\r\n        opacity,\r\n        transparent: true\r\n    });\r\n    const mesh = new THREE.Mesh(geometry, material);\r\n\r\n    const wireframe = new THREE.LineSegments(\r\n        new THREE.EdgesGeometry(geometry),\r\n        new THREE.LineBasicMaterial()\r\n    );\r\n\r\n    group.add(mesh);\r\n    group.add(wireframe);\r\n\r\n    scene.add(group);\r\n\r\n    const speed = 1;\r\n\r\n    function update(time) {\r\n        const angle = time*speed;\r\n        group.rotation.z = -angle;\r\n        group.rotation.x = angle;\r\n        // group.rotation.z = -45;\r\n    }\r\n\r\n    return {update};\r\n}","import * as THREE from 'three';\r\nimport {DiceManager, DiceD10} from 'threejs-dice';\r\nimport CANNON from 'cannon';\r\n\r\nwindow.THREE = THREE;\r\nwindow.CANNON = CANNON;\r\n\r\nexport default (scene, radius, materialColor1, materialColor2, opacity) => {\r\n    const group = new THREE.Group();\r\n\r\n    // console.log('threejs-dice', DiceD10.getGeometry);\r\n    const world = new CANNON.World();\r\n    DiceManager.setWorld(world);\r\n\r\n    const d10Model1 = new DiceD10({size: radius});\r\n    d10Model1.chamfer = 1;\r\n    const geometry1 = d10Model1.getGeometry();\r\n    const material1 = new THREE.MeshLambertMaterial({\r\n        color: materialColor1,\r\n        side: THREE.DoubleSide,\r\n        opacity,\r\n        transparent: true\r\n    });\r\n    const mesh1 = new THREE.Mesh(geometry1, material1);\r\n    const wireframe1 = new THREE.LineSegments(\r\n        new THREE.EdgesGeometry(geometry1),\r\n        new THREE.LineBasicMaterial()\r\n    );\r\n\r\n    const d10Model2 = new DiceD10({size: radius/3});\r\n    d10Model2.chamfer = 1;\r\n    const geometry2 = d10Model2.getGeometry();\r\n    const material2 = new THREE.MeshLambertMaterial({\r\n        color: materialColor2,\r\n        side: THREE.DoubleSide,\r\n        opacity,\r\n        transparent: true\r\n    });\r\n    const mesh2 = new THREE.Mesh(geometry2, material2);\r\n    const wireframe2 = new THREE.LineSegments(\r\n        new THREE.EdgesGeometry(geometry2),\r\n        new THREE.LineBasicMaterial()\r\n    );\r\n\r\n    group.add(mesh1);\r\n    group.add(wireframe1);\r\n\r\n    mesh2.position.set(-radius*.6, radius*.6, -radius*.6);\r\n    wireframe2.position.set(-radius*.6, radius*.6, -radius*.6);\r\n\r\n    group.add(mesh2);\r\n    group.add(wireframe2);\r\n\r\n    scene.add(group);\r\n\r\n    const speed = 1;\r\n\r\n    function update(time) {\r\n        const angle = time*speed;\r\n        group.rotation.z = -angle;\r\n        group.rotation.x = angle;\r\n        // group.rotation.z = -45;\r\n    }\r\n\r\n    return {update};\r\n}","import * as THREE from 'three';\r\n\r\nexport default (scene, radius, materialColor, opacity) => {\r\n    const group = new THREE.Group();\r\n\r\n    const geometry = new THREE.IcosahedronGeometry(radius);\r\n    const material = new THREE.MeshLambertMaterial({\r\n        color: materialColor,\r\n        side: THREE.DoubleSide,\r\n        opacity,\r\n        transparent: true\r\n    });\r\n    const mesh = new THREE.Mesh(geometry, material);\r\n\r\n    const wireframe = new THREE.LineSegments(\r\n        new THREE.EdgesGeometry(geometry),\r\n        new THREE.LineBasicMaterial()\r\n    );\r\n\r\n    group.add(mesh);\r\n    group.add(wireframe);\r\n\r\n    scene.add(group);\r\n\r\n    const speed = 1;\r\n\r\n    function update(time) {\r\n        const angle = time*speed;\r\n        group.rotation.z = -angle;\r\n        group.rotation.x = angle;\r\n        // group.rotation.z = -45;\r\n    }\r\n\r\n    return {update};\r\n}","import * as THREE from 'three';\r\n\r\nexport default (scene, radius, materialColor, opacity) => {\r\n    const group = new THREE.Group();\r\n\r\n    const geometry = new THREE.OctahedronGeometry(radius);\r\n    const material = new THREE.MeshLambertMaterial({\r\n        color: materialColor,\r\n        side: THREE.DoubleSide,\r\n        opacity,\r\n        transparent: true\r\n    });\r\n    const mesh = new THREE.Mesh(geometry, material);\r\n\r\n    const wireframe = new THREE.LineSegments(\r\n        new THREE.EdgesGeometry(geometry),\r\n        new THREE.LineBasicMaterial()\r\n    );\r\n\r\n    group.add(mesh);\r\n    group.add(wireframe);\r\n\r\n    scene.add(group);\r\n\r\n    const speed = 1;\r\n\r\n    function update(time) {\r\n        const angle = time*speed;\r\n        group.rotation.z = -angle;\r\n        group.rotation.x = angle;\r\n        // group.rotation.z = -45;\r\n    }\r\n\r\n    return {group, update};\r\n}","import * as THREE from 'three';\r\nimport {DiceManager, DiceD10} from 'threejs-dice';\r\nimport CANNON from 'cannon';\r\n\r\nwindow.THREE = THREE;\r\nwindow.CANNON = CANNON;\r\n\r\nexport default (scene, radius, materialColor, opacity) => {\r\n    const group = new THREE.Group();\r\n\r\n    // console.log('threejs-dice', DiceD10.getGeometry);\r\n    const world = new CANNON.World();\r\n    DiceManager.setWorld(world);\r\n    const d10Model = new DiceD10({size: radius});\r\n    d10Model.chamfer = 1;\r\n    const geometry = d10Model.getGeometry();\r\n    const material = new THREE.MeshLambertMaterial({\r\n        color: materialColor,\r\n        side: THREE.DoubleSide,\r\n        opacity,\r\n        transparent: true\r\n    });\r\n    const mesh = new THREE.Mesh(geometry, material);\r\n\r\n    const wireframe = new THREE.LineSegments(\r\n        new THREE.EdgesGeometry(geometry),\r\n        new THREE.LineBasicMaterial()\r\n    );\r\n\r\n    group.add(mesh);\r\n    group.add(wireframe);\r\n\r\n    scene.add(group);\r\n\r\n    const speed = 1;\r\n\r\n    function update(time) {\r\n        const angle = time*speed;\r\n        group.rotation.z = -angle;\r\n        group.rotation.x = angle;\r\n        // group.rotation.z = -45;\r\n    }\r\n\r\n    return {update};\r\n}","import * as THREE from 'three';\r\n\r\nexport default (scene, radius, materialColor, opacity) => {\r\n    const group = new THREE.Group();\r\n\r\n    const geometry = new THREE.TetrahedronGeometry(radius);\r\n    const material = new THREE.MeshLambertMaterial({\r\n        color: materialColor,\r\n        side: THREE.DoubleSide,\r\n        opacity,\r\n        transparent: true\r\n    });\r\n    const mesh = new THREE.Mesh(geometry, material);\r\n\r\n    const wireframe = new THREE.LineSegments(\r\n        new THREE.EdgesGeometry(geometry),\r\n        new THREE.LineBasicMaterial()\r\n    );\r\n\r\n    group.add(mesh);\r\n    group.add(wireframe);\r\n\r\n    scene.add(group);\r\n\r\n    const speed = 1;\r\n\r\n    function update(time) {\r\n        const angle = time*speed;\r\n        group.rotation.z = -angle;\r\n        group.rotation.x = angle;\r\n        // group.rotation.z = -45;\r\n    }\r\n\r\n    return {update};\r\n}","export const PINK = '#ef5777';\r\nexport const RED = '#f53b57';\r\nexport const LIGHT_ORANGE = '#ffc048';\r\nexport const ORANGE = '#ff3f34';\r\nexport const YELLOW = '#ffdd59';\r\nexport const GREEN = '#0be881';\r\nexport const TEAL = '#05c46b';\r\nexport const DARK_TEAL = '#005b5b';\r\nexport const TURQUOISE = '#34e7e4';\r\nexport const BLUE = '#4bcffa';\r\nexport const PURPLE = '#575fcf';","import React, {Component} from 'react';\r\nimport DieButton from './DieButton';\r\nimport Cube from '../threejs/Cube';\r\nimport Dodecahedron from '../threejs/Dodecahedron';\r\nimport DoublePentagonalTrapezohedron from '../threejs/DoublePentagonalTrapezohedron';\r\nimport Icosahedron from '../threejs/Icosahedron';\r\nimport Octahedron from '../threejs/Octahedron';\r\nimport PentagonalTrapezohedron from '../threejs/PentagonalTrapezohedron';\r\nimport Tetrahedron from '../threejs/Tetrahedron';\r\nimport * as Colors from '../threejs/Colors'\r\n\r\nclass QuickRoll extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {forceResize: 0};\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('resize', () => this.forceUpdate())\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // <table className=\"quick-roll-table\"><tbody style={{maxWidth: '100%'}}><tr style={{maxWidth: '100%'}}>\r\n            <div className=\"qr\" style={{display: 'flex'}}>\r\n                <DieButton sides={4} shape={Tetrahedron} color={Colors.PINK} ambientColor={'white'} strongLightColor={Colors.LIGHT_ORANGE} weakLightColor={Colors.YELLOW}/>\r\n                <DieButton sides={6} shape={Cube} color={Colors.ORANGE} ambientColor={'white'} strongLightColor={Colors.YELLOW} weakLightColor={Colors.GREEN} />\r\n                <DieButton sides={8} shape={Octahedron} color={Colors.YELLOW} ambientColor={'white'} strongLightColor={Colors.GREEN} weakLightColor={Colors.TEAL} />\r\n                <DieButton sides={10} shape={PentagonalTrapezohedron} color={Colors.GREEN} ambientColor={'white'} strongLightColor={Colors.YELLOW} weakLightColor={Colors.YELLOW} />\r\n                <DieButton sides={12} shape={Dodecahedron} color={Colors.TURQUOISE} ambientColor={'white'} strongLightColor={Colors.BLUE} weakLightColor={Colors.PURPLE} />\r\n                <DieButton sides={20} shape={Icosahedron} color={Colors.BLUE} ambientColor={Colors.PURPLE} strongLightColor={Colors.PURPLE} weakLightColor={Colors.RED} />\r\n                <DieButton sides={'%'} shape={DoublePentagonalTrapezohedron} color={Colors.PURPLE} color2={Colors.RED} ambientColor={Colors.RED} strongLightColor={Colors.RED} weakLightColor={Colors.LIGHT_ORANGE} />\r\n            </div>\r\n            // </tr></tbody></table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuickRoll;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../actions';\r\nimport parseRollNotation from '../diceLogic/parseRollNotation';\r\nimport {interpretRoll} from '../diceLogic/interpretRoll';\r\n\r\nclass RollInput extends Component {\r\n\r\n\tcomponentDidMount() {\r\n\t\tdocument.querySelector('.roll-input').addEventListener('change', () => {\r\n\t\t\tdocument.querySelector('.roll-input').classList.remove('roll-input-validation-error')\r\n\t\t});\r\n\t}\r\n\r\n\tparseRoll = () => {\r\n\t\tconst notation = this.props.inputValue;\r\n\t\tconst cleansedNotation = notation.split('d%').join('d100');\r\n\t\tconst parsed = parseRollNotation(cleansedNotation);\r\n\r\n\t\tif(parsed instanceof Error) {\r\n\t\t\tconst fullError = parsed.toString();\r\n\t\t\tlet cleanError = fullError.substr(fullError.lastIndexOf('Error: ') + 'Error: '.length);\r\n\t\t\tif(cleanError === \"Invalid term ''.\") {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tdocument.querySelector('#roll-input-validation-label').innerHTML = '* ' + cleanError;\r\n\t\t\tdocument.querySelector('.roll-input-validation-label').style.display = 'block';\r\n\t\t\tdocument.querySelector('.roll-input').classList.add('roll-input-validation-error');\r\n\t\t}\r\n\t\telse if(!parsed) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\telse {\r\n\t\t\tconst rolled = interpretRoll(parsed);\r\n\t\t\tthis.props.addRoll({original: notation, rollData: rolled});\r\n\t\t\tthis.props.modifyInput('');\r\n\t\t}\r\n\t};\r\n\r\n    render() {\r\n        return (\r\n\t\t\t<div>\r\n\t\t\t\t<div className=\"roll-input-div\">\r\n\t\t\t\t\t<span style={{width: '90%', display: 'inline-block'}}>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\tid=\"roll-input\"\r\n\t\t\t\t\t\t\tclassName=\"roll-input\"\r\n\t\t\t\t\t\t\tplaceholder=\"3d12 + 2d8 + 10\"\r\n\t\t\t\t\t\t\tvalue={this.props.inputValue}\r\n\t\t\t\t\t\t\tonChange={this.onChangeInput}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<span style={{width: '10%', display: 'inline-block'}}>\r\n\t\t\t\t\t\t<button className=\"roll-input-button\" onClick={this.parseRoll}>\r\n\t\t\t\t\t\t\tRoll\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"roll-input-validation-label\">\r\n\t\t\t\t\t<label htmlFor=\"roll-input\" id=\"roll-input-validation-label\"></label>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n        );\r\n\t}\r\n\t\r\n\tonChangeInput = (event) => {\r\n\t\tthis.props.modifyInput(event.target.value);\r\n\t\tdocument.querySelector('.roll-input-validation-label').style.display = 'none';\r\n\t\tdocument.querySelector('.roll-input').classList.remove('roll-input-validation-error');\r\n\t}\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n\treturn {\r\n\t\tinputValue: state.inputValue\r\n\t};\r\n}\r\n\r\nexport default connect(mapStateToProps, actions)(RollInput);","import React from 'react';\r\n\r\nexport function displayRollBreakdown({rollData}) {\r\n\tif(!rollData) {return;}\r\n\tconst {roll} = rollData; \r\n\treturn (\r\n\t\t<span className='breakdown'>\r\n\t\t\t{roll.map((term, index) => breakdownTerm(term, index))}\r\n\t\t</span>\r\n\t);\r\n}\r\n\r\nfunction breakdownTerm(term, index) {\r\n\tif(term.constant) {\r\n\t\treturn <span key={index} className='breakdown-constant'> {term.constant} </span>;\r\n\t}\r\n\telse if(term.operator) {\r\n\t\treturn <span key={index} className='breakdown-operator'> {term.operator} </span>;\r\n\t}\r\n\telse {\r\n\t\tconsole.log(term.synthesizedRolls);\r\n\t\tconst polyhedronSpan = <i key={'poly' + index} className={determinePolyhedronClasses(term.diceTerm.die.sides)}></i>;\r\n\t\tif(term.synthesizedRolls.length <= 1) {\r\n\t\t\treturn (\r\n\t\t\t\t<span key={'term' + index}>\r\n\t\t\t\t\t{polyhedronSpan}{breakdownDiceTerm(term)}\r\n\t\t\t\t</span>\r\n\t\t\t);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn (\r\n\t\t\t\t<span key={'term' + index}>\r\n\t\t\t\t\t{polyhedronSpan}({breakdownDiceTerm(term)})\r\n\t\t\t\t</span>\r\n\t\t\t );\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction dieClasses(term, dieIndex) {\r\n\tlet classList = ['breakdown-die'];\r\n\tif(term.explosions && term.explosions[dieIndex]) {\r\n\t\tclassList.push('breakdown-exploded');\r\n\t}\r\n\telse if(/*(!term.explosions || term.explosions.length < 1) &&*/ (term.allRolls[dieIndex] === term.diceTerm.die.sides)) {\r\n\t\tclassList.push('breakdown-critical-hit');\r\n\t}\r\n\tif(term.rerolls && term.rerolls[dieIndex]) {\r\n\t\tclassList.push('breakdown-rerolled');\r\n\t}\r\n\tif(term.synthesizedRolls[dieIndex] == 1) {\r\n\t\tclassList.push('breakdown-critical-miss');\r\n\t}\r\n\tif(!term.keep[dieIndex]) {\r\n\t\tclassList.push('breakdown-dropped');\r\n\t}\r\n\treturn classList.join(' ');\r\n}\r\n\r\nfunction breakdownDiceTerm(term) {\r\n\treturn term.synthesizedRolls.map((die, index) => {\r\n\t\tconst classList = dieClasses(term, index);\r\n\t\tconst dieSpan = <span key={index} className={classList}> {die}</span>;\r\n\t\tconst elementArr = [dieSpan];\r\n\t\tif(index < term.synthesizedRolls.length - 1) {\r\n\t\t\telementArr.push(<span key={'plus' + index} className='breakdown-operator'>&nbsp;+&nbsp;</span>);\r\n\t\t}\r\n\t\treturn elementArr;\r\n\t});\r\n}\r\n\r\nfunction determinePolyhedronClasses(sides) {\r\n\tswitch(sides) {\r\n\t\tcase 4:\r\n\t\t\treturn \"flaticon-tetrahedron poly polyhedron-d4\";\r\n\t\tcase 6:\r\n\t\t\treturn \"flaticon-cube poly polyhedron-d6\";\r\n\t\tcase 8:\r\n\t\t\treturn \"flaticon-octahedron poly polyhedron-d8\";\r\n\t\tcase 10:\r\n\t\t\treturn \"flaticon-dodecahedron-1 poly polyhedron-d10\";\r\n\t\tcase 12:\r\n\t\t\treturn \"flaticon-dodecahedron poly polyhedron-d12\";\r\n\t\tcase 20:\r\n\t\t\treturn \"flaticon-icosahedron poly polyhedron-d20\";\r\n\t\tcase 100:\r\n\t\t\treturn \"flaticon-dodecahedron-1 poly polyhedron-d100\";\r\n\t\tdefault:\r\n\t\t\treturn \"flaticon-dodecahedron-2 poly polyhedron-dn\";\r\n\t}\r\n}","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../actions';\r\nimport {displayRollBreakdown} from '../diceLogic/displayRollBreakdown';\r\n\r\nclass RollTable extends Component {\r\n\trenderRolls() {\r\n\t\tif(!this.props.rolls) {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\treturn this.props.rolls.map((roll, index) => {\r\n\t\t\tconst breakdown = displayRollBreakdown(roll);\r\n\t\t\tconst band = (index % 2 !== this.props.rolls.length % 2) ? 'roll-table-dark-band' : 'roll-table-light-band';\r\n\t\t\tconst rollRowClass = `roll-row ${band}`;\r\n\t\t\treturn (\r\n\t\t\t\t<tr key={index} className={rollRowClass} onClick={() => this.props.modifyInput(roll.original)}>\r\n\t\t\t\t\t<td className=\"roll-table-roll-data\">{breakdown}</td>\r\n\t\t\t\t\t<td className=\"roll-table-roll-evaluated\">{roll.rollData.evaluated}</td>\r\n\t\t\t\t</tr>\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<table style={{width: '100%', borderCollapse: 'collapse', border: '3px solid #333'}}>\r\n\t\t\t\t<tbody style={{width: '100%'}} className=\"roll-table\">\r\n\t\t\t\t\t{this.renderRolls()}\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n\treturn {rolls: state.rolls};\r\n}\r\n\r\nexport default connect(mapStateToProps, actions)(RollTable);","import React, { Component } from 'react';\r\nimport QuickRoll from './QuickRoll';\r\nimport RollInput from './RollInput';\r\nimport RollTable from './RollTable';\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <QuickRoll />\r\n                <RollInput />\r\n\t\t\t\t<RollTable />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore} from 'redux';\r\n\r\nimport reducers from './reducers';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n\t<Provider store={createStore(reducers)}>\r\n\t\t<App />\r\n\t</Provider>,\r\n\tdocument.getElementById('root')\r\n);\r\n","export function interpretRoll(roll) {\r\n\tconst terms = [];\r\n\troll.forEach((term) => {\r\n\t\tif(term['die']) {\r\n\t\t\tterms.push(rollDice(term));\r\n\t\t}\r\n\t\telse {terms.push(term)};\r\n\t});\r\n\r\n\tconsole.log(terms);\r\n\r\n\tconst toEvaluate = terms.map((term) => {\r\n\t\tif(term.allRolls) {\r\n\t\t\treturn term.sum;\r\n\t\t}\r\n\t\telse if(term.operator) {\r\n\t\t\treturn term.operator;\r\n\t\t}\r\n\t\telse if(term.constant) {\r\n\t\t\treturn term.constant;\r\n\t\t}\r\n\t}).join('');\r\n\r\n\treturn {roll: terms, evaluated: eval(toEvaluate)};\r\n};\r\n\r\nfunction rollDice(diceTerm) {\r\n\tconst allRolls = [];\r\n\tfor(let i = 0; i < diceTerm.count; i++) {\r\n\t\tallRolls.push(generateRoll(diceTerm.die.sides));\r\n\t}\r\n\tconst explosions = diceTerm.die.explode ? explode(diceTerm, allRolls) : null;\r\n\tconst rerolls = diceTerm.die.reroll ? rerollLowest(diceTerm, allRolls) : null;\r\n\r\n\tconst synthesizedRolls = synthesizeRolls(allRolls, explosions, rerolls);\r\n\r\n\tconst keep = determineKeep(diceTerm, synthesizedRolls);\r\n\tconst sum = sumOfRolls(synthesizedRolls, keep);\r\n\r\n\treturn {allRolls, explosions, rerolls, keep, sum, synthesizedRolls, diceTerm};\r\n}\r\n\r\nfunction generateRoll(sides) {\r\n\treturn Math.floor(Math.random() * sides) + 1;\r\n}\r\n\r\nfunction compareByRoll(a, b) {\r\n\tif (a.roll < b.roll) {return -1;}\r\n\tif (a.roll > b.roll) {return 1;}\r\n\treturn 0;\r\n}\r\n\r\nfunction explode(diceTerm, allRolls) {\r\n\treturn allRolls.map(roll => {\r\n\t\tif(diceTerm.die.explode.includes(roll)) {\r\n\t\t\tconst explosionChain = [];\r\n\t\t\tlet currentRoll = roll;\r\n\t\t\twhile(currentRoll === diceTerm.die.sides) {\r\n\t\t\t\texplosionChain.push(currentRoll);\r\n\t\t\t\tcurrentRoll = generateRoll(diceTerm.die.sides);\r\n\t\t\t}\r\n\t\t\texplosionChain.push(currentRoll);\r\n\t\t\treturn explosionChain;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction rerollLowest(diceTerm, rolls) {\r\n\treturn rolls.map((roll) => {\r\n\t\tif(diceTerm.die.reroll.includes(roll)) {\r\n\t\t\treturn [roll, generateRoll(diceTerm.die.sides)];\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction determineKeep(diceTerm, allRolls) {\r\n\tconst keepFlags = [];\r\n\tconst rollsWithIndices = allRolls.map((roll, index) => {\r\n\t\tkeepFlags.push(true);\r\n\t\treturn {roll, index};\r\n\t});\r\n\tif(diceTerm.keep === 0) {return keepFlags;}\r\n\trollsWithIndices.sort(compareByRoll);\r\n\tfor(let i = 0; i < (diceTerm.count - diceTerm.keep); i++) {\r\n\t\tkeepFlags[rollsWithIndices[i].index] = false;\r\n\t}\r\n\r\n\treturn keepFlags;\r\n}\r\n\r\nfunction sumOfRolls(rolls, keep) {\r\n\treturn rolls.reduce((prev, roll, index) => {\r\n\t\tif(keep[index]) { return prev + roll; }\r\n\t\telse { return prev; }\r\n\t}, 0);\r\n}\r\n\r\nfunction sum(array) { return array.reduce((total, current) => total + current); }\r\n\r\nfunction synthesizeRolls(allRolls, explosions, rerolls) {\r\n\tconst rolls = [...allRolls];\r\n\r\n\tif(explosions) {\r\n\t\texplosions.map((explosion, index) => {\r\n\t\t\tif(explosion) {\r\n\t\t\t\trolls[index] = sum(explosion);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tif(rerolls) {\r\n\t\trerolls.map((reroll, index) => {\r\n\t\t\tif(reroll) {\r\n\t\t\t\trolls[index] = reroll[reroll.length - 1];\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\treturn rolls;\r\n}\r\n\r\n// Return a version of the roll object with chains of terms with similarly precedented operators clumped\r\n// function chainByOperator(roll, operators) {\r\n// \tconst ops = operators.split('|');\r\n\r\n// }"],"sourceRoot":""}